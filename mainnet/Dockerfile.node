# syntax=docker/dockerfile:1
FROM builder

# Install Cardano dependencies and tools
RUN apt-get update -y && \
    apt-get install automake build-essential pkg-config libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev make g++ tmux git jq wget libncursesw5 libtool autoconf liblmdb-dev -y && \
    apt-get install curl vim -y

RUN mkdir src

# Install libsodium
RUN cd src && \
    git clone https://github.com/input-output-hk/libsodium && \
    cd libsodium && \
    git checkout dbb48cc && \
    ./autogen.sh && \
    ./configure && \
    make && \
    make install

# Update PATH
ENV LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"

#Install libsecp256k1
RUN cd src && \
    git clone https://github.com/bitcoin-core/secp256k1 && \
    cd secp256k1 && \
    git checkout ac83be33 && \
    ./autogen.sh && \
    ./configure --enable-module-schnorrsig --enable-experimental && \
    make && \
    make install

# Install BLST
RUN cd src && \
    git clone https://github.com/supranational/blst && \
    cd blst && \
    git checkout v0.3.10 && \
    ./build.sh
RUN cat <<EOF > src/blst/libblst.pc 
  prefix=/usr/local
  exec_prefix=\${prefix}
  libdir=\${exec_prefix}/lib
  includedir=\${prefix}/include

  Name: libblst
  Description: Multilingual BLS12-381 signature library
  URL: https://github.com/supranational/blst
  Version: 0.3.10
  Cflags: -I\${includedir}
  Libs: -L\${libdir} -lblst
EOF
RUN cd src/blst && \
    cp libblst.pc /usr/local/lib/pkgconfig/ && \
    cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp  /usr/local/include/ && \
    cp libblst.a /usr/local/lib

# Get latest config files
RUN wget -P /node/configuration \
  https://raw.githubusercontent.com/input-output-hk/cardano-playground/main/static/book.play.dev.cardano.org/environments/mainnet/byron-genesis.json \
  https://raw.githubusercontent.com/input-output-hk/cardano-playground/main/static/book.play.dev.cardano.org/environments/mainnet/shelley-genesis.json \
  https://raw.githubusercontent.com/input-output-hk/cardano-playground/main/static/book.play.dev.cardano.org/environments/mainnet/alonzo-genesis.json \
  https://raw.githubusercontent.com/input-output-hk/cardano-playground/main/static/book.play.dev.cardano.org/environments/mainnet/conway-genesis.json \
  https://raw.githubusercontent.com/input-output-hk/cardano-playground/main/static/book.play.dev.cardano.org/environments/mainnet/config.json

# Change config to save them in /node/log/node.log file instead of stdout
RUN sed -i 's/StdoutSK/FileSK/' /node/configuration/config.json && \
  sed -i 's/stdout/\/node\/logs\/node.log/' /node/configuration/config.json && \
  sed -i 's/\"TraceBlockFetchDecisions\": false/\"TraceBlockFetchDecisions\": true/' /node/configuration/config.json && \
  sed -i 's/\"127.0.0.1\"/\"0.0.0.0\"/' /node/configuration/config.json

ARG RELAY1_IP
ARG RELAY1_PORT

ARG RELAY2_IP
ARG RELAY2_PORT

RUN <<EOT
    if [ -n "${RELAY1_IP}" ] && [ -n "${RELAY1_PORT}" ] && [ -n "${RELAY2_IP}" ] && [ -n "${RELAY2_PORT}" ] ; then \
        jq -n \
        --arg relay1_ip "$RELAY1_IP" \
        --arg relay1_port "$RELAY1_PORT" \
        --arg relay2_ip "$RELAY2_IP" \
        --arg relay2_port "$RELAY2_PORT" \
        '{
          "localRoots": [
            {
              "accessPoints": [
                {"address": $relay1_ip, "port": $relay1_port},
                {"address": $relay2_ip, "port": $relay2_port}
              ],
              "advertise": false,
              "valency": 1
            }
          ],
          "publicRoots": [],
          "useLedgerAfterSlot": -1
        }' > /node/configuration/topology.json
    elif [ -n "${RELAY1_IP}" ] && [ -n "${RELAY1_PORT}" ] ; then \
        jq -n \
        --arg relay1_ip "$RELAY1_IP" \
        --arg relay1_port "$RELAY1_PORT" \
        '{
          "localRoots": [
            {
              "accessPoints": [
                {"address": $relay1_ip, "port": $relay1_port}
              ],
              "advertise": false,
              "valency": 1
            }
          ],
          "publicRoots": [],
          "useLedgerAfterSlot": -1
        }' > /node/configuration/topology.json
    else 
      jq -n \
        '{
          "localRoots": [
            {
              "accessPoints": [],
              "advertise": false,
              "valency": 1
            }
          ],
          "publicRoots": [
            {
              "accessPoints": [
                {
                  "address": "backbone.cardano-mainnet.iohk.io",
                  "port": 3001
                },
                {
                  "address": "backbone.cardano.iog.io",
                  "port": 3001
                },
                {
                  "address": "backbone.mainnet.emurgornd.com",
                  "port": 3001
                }
              ],
              "advertise": false
            }
          ],
          "useLedgerAfterSlot": 110332824
        }' > /node/configuration/topology.json 
    fi
EOT


ARG CNCLI_API_KEY 
ARG CNCLI_POOL_NAME
ARG CNCLI_POOL_ID
ARG CNCLI_HOST
ARG CNCLI_PORT

RUN <<EOT
    jq -n \
        --arg api_key "$CNCLI_API_KEY" \
        --arg pool_name "$CNCLI_POOL_NAME" \
        --arg pool_id "$CNCLI_POOL_ID" \
        --arg host "$CNCLI_HOST" \
        --arg port "$CNCLI_PORT" \
        '{
            api_key: $api_key, 
            pools: [
                { 
                    name: $pool_name,
                    pool_id: $pool_id,
                    host : $host,
                    port: $port,
                }
            ]
        }' \
        > /node/configuration/cncli-config.json
EOT

# Set path location
ENV NODE_HOME=/node
ENV POOL_KEYS=${NODE_HOME}/pool-keys
ENV DATA=${NODE_HOME}/data
ENV CONFIGURATION=${NODE_HOME}/configuration

# Set network for cardano-cli commands
ENV NETWORK="--mainnet"

# Set node socket evironment for cardano-cli
ENV CARDANO_NODE_SOCKET_PATH="/node/ipc/node.socket"

# Set mainnet magic number
ENV MAGIC_NUMBER=764824073

# Create keys, ipc, data, scripts, logs folders
RUN mkdir -p /node/ipc /node/logs /node/pool-keys

# Copy scripts
COPY cardano-scripts/ /usr/local/bin

# Set executable permits
RUN /bin/bash -c "chmod +x /usr/local/bin/*.sh"

# Run cardano-node at the startup
CMD [ "/usr/local/bin/run-cardano-node.sh" ]